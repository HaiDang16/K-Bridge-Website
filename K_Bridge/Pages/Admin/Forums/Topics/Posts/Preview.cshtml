@page "{id:int}"
@model K_Bridge.Pages.Admin.Forums.Topics.Posts.PreviewModel
@{
    ViewData["Title"] = "Duyệt bài viết";
    <link href="/css/Newest.css" rel="stylesheet" />
    bool isVoteAvaiable = true;
    string MaxChoice = "single";
    string CloseAfter = "day";
}

<div class="row account-navigate mt-3 px-5 align-items-center ">
    <div class="col-6 d-flex justify-content-star">
        <img src="/img/icon_dashboard_50_dark.png"
             onclick="window.location.href='/Admin/Dashboard'"
             class="account-navigate-icon mt-2 custom-cursor-pointer" alt="Tổng quan">
        <img src="/img/icon_arrow_right_50_dark.png" class="mx-4 mt-2 py-1"
             alt="Tổng quan" width="10" height="20">
        <div class="account-navigate-text custom-cursor-pointer"
             onclick="window.location.href='/Admin/Forums'">
            Lập trình
        </div>
        <img src="/img/icon_arrow_right_50_dark.png" class="mx-4 mt-2 py-1"
             alt="Tổng quan" width="10" height="20">
        <div class="account-navigate-text custom-cursor-pointer "
             onclick="window.location.href='/Admin/Forums/Topics'">
            Bài viết
        </div>
        <img src="/img/icon_arrow_right_50_dark.png" class="mx-4 mt-2 py-1"
             alt="Tổng quan" width="10" height="20">
        <div class="account-navigate-text custom-cursor-pointer "
             onclick="window.location.href='/Admin/Forums/Topics/Post'">
            Bài viết @Model.Post.ID
        </div>
    </div>
    <div class="col-9">
    </div>
</div>
<div class="row mt-3 px-5">
    <p class="account-title pb-3" style="border-bottom: 3px solid #8E6745">Bài viết @Model.Post.ID</p>
</div>
<div class="container-fluid">
    <div class="row main-content mt-4 mx-3">
        <div class="col-lg-9 col-md-8 col-12 content mb-4 ">
            <div class="pb-3">
                <div class="d-flex justify-content-start fs-4">
                    @Model.Post.Title
                </div>
                <div class="d-flex justify-content-between align-items-center" style="border-bottom: 1px solid #493422">
                    <div class="m-0 p-0 d-flex justify-content-between">
                        <div class="py-2 me-2">0 Câu trả lời</div>
                        <div class="py-2 ms-2">0 Lượt xem</div>
                    </div>
                    <div class="newest-card-tag px-5 mx-3 "
                         style="background: @GetForumColorHelper.GetForumBackgroundColor(Model.Post.Topic.Forum.ID);
                                        color:@GetForumColorHelper.GetForumColor(Model.Post.Topic.Forum.ID)">
                        @Model.Post.Topic.Forum.TagName
                    </div>
                </div>
                <div class="row m-0 p-0 mt-3 ">
                    <div class="col-lg-1 flex-column">
                       
                    </div>
                    <div class="col-lg-11">
                        <div>
                            @if (isVoteAvaiable)
                            {
                                <div class="my-3">
                                    <div class="d-flex justify-content-between my-2">
                                        <div class="d-flex justify-content-between">
                                            <div class="mx-2 align-content-center">
                                                <img src="~/img/chart.png" width="20" height="20" alt="Chart Icon" />
                                            </div>
                                            <h4 style="color: #8E6745;">Câu hỏi bình chọn?</h4>
                                        </div>
                                    </div>

                                    <div id="pollForm">
                                        @for (int i = 1; i < 4; i++)
                                        {
                                            @if (MaxChoice == "single")
                                            {
                                                <div class="custom-radio-group d-flex flex-column mb-2">
                                                    <label class="custom-radio rounded-3">
                                                        <input type="radio" name="maxChoice" value="@i">
                                                        <span class="radio-text">Lựa chọn @i</span>
                                                    </label>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="custom-radio-group d-flex flex-column mb-2">
                                                    <label class="custom-radio rounded-3">
                                                        <input type="checkbox" name="maxChoice" value="@i">
                                                        <span class="radio-text">Lựa chọn @i</span>
                                                    </label>
                                                </div>
                                            }
                                        }
                                    </div>

                                    <div id="pollResults" style="display: none;">
                                        @{
                                            var fakeVotes = new[] { 50, 30, 20 };
                                            int maxVotes = fakeVotes.Max();
                                            int totalVotes = fakeVotes.Sum();
                                        }
                                        @for (int i = 0; i < 3; i++)
                                        {
                                            int votes = fakeVotes[i];
                                            int percentageOfTotal = totalVotes > 0 ? (votes * 100) / totalVotes : 0;
                                            int percentageOfMax = maxVotes > 0 ? (votes * 100) / maxVotes : 0;
                                            int displayWidth = Math.Max(30, percentageOfMax);
                                            <div class="poll-result">
                                                <div class="poll-bar" data-width="@displayWidth">
                                                    <span class="poll-option">Lựa chọn @(i + 1)</span>
                                                    <span class="poll-percentage">@(percentageOfTotal)% (@votes votes)</span>
                                                </div>
                                            </div>
                                        }
                                    </div>

                                    @if (CloseAfter == "day")
                                    {
                                        <div class="mt-2">
                                            <small class="fs-12 text-color-header">Bình chọn sẽ đóng sau: <small class="fw-bold text-color-logo"> 1 ngày</small> </small>
                                        </div>
                                    }
                                </div>
                            }


                            <p>
                                @Html.Raw(@Model.Post.Content)
                            </p>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div class="col-lg-3 col-md-12">
            <div class="text-center">
                <img class="rounded-circle" src="~/img/user.jpg" alt="User" height="150" width="150"/>
            </div>
            <div class="d-flex text-color-header mt-5">
                <div class="col-7 text-uppercase ">
                    <p>Tên đăng nhập:</p>
                    <p>Đã tham gia:</p>
                    <p>Bài viết đã đăng:</p>
                </div>
                <div class="col-5">
                    <p>@Model.Post.User.Username</p>
                    <p>12 ngày</p>
                    <p>124 bài viết</p>
                </div>
            </div>
            <select style="width: 100%;" class="text-uppercase mb-3 fw-bold px-2 py-2" style="border: 2px solid #8E6745; color: #493422; background-color: #FFF0E6;">
                <option selected>Chưa phê duyệt</option>
                <option value="approved" style="color: #FFF0E6; background-color: #00D462;" class="py-3">Phê duyệt</option>
                <option value="rejected" style="color: #FFF0E6; background-color: #FF4141;" class="py-3">Từ chối</option>
            </select>
            <div style="max-width: 300px;" class="mt-2 justify-content-end">
                <button type="button" style="color: #FFF0E6; background-color: #493422;"
                        class="p-2 text-uppercase rounded-3 fs-6 w-100" onclick="window.location.href='/Admin/Forums/Topics'">
                    Xác nhận
                </button>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const boldBtn = document.getElementById('bold-btn');
        const italicBtn = document.getElementById('italic-btn');
        const underlineBtn = document.getElementById('underline-btn');
        const undoBtn = document.getElementById('undo-btn');
        const redoBtn = document.getElementById('redo-btn');
        const contentArea = document.getElementById('content-area');

        let undoStack = [''];
        let redoStack = [];

        function applyStyle(style) {
            const start = contentArea.selectionStart;
            const end = contentArea.selectionEnd;
            const selectedText = contentArea.value.substring(start, end);
            let replacement = '';

            switch (style) {
                case 'bold':
                    replacement = `<strong>${selectedText}</strong>`;
                    break;
                case 'italic':
                    replacement = `<em>${selectedText}</em>`;
                    break;
                case 'underline':
                    replacement = `<u>${selectedText}</u>`;
                    break;
            }

            contentArea.value = contentArea.value.substring(0, start) + replacement + contentArea.value.substring(end);

            this.classList.toggle('active');
            saveState();
        }

        function saveState() {
            undoStack.push(contentArea.value);
            redoStack = [];
        }

        function updateButtonStates() {
            const selection = window.getSelection();
            if (selection.rangeCount > 0) {
                const range = selection.getRangeAt(0);
                const span = document.createElement('span');
                range.surroundContents(span);

                boldBtn.classList.toggle('active', span.querySelector('strong'));
                italicBtn.classList.toggle('active', span.querySelector('em'));
                underlineBtn.classList.toggle('active', span.querySelector('u'));

                range.extractContents();
                range.insertNode(span.firstChild);
            }
        }

        function debounce(func, delay) {
            let timeoutId;
            return function () {
                const context = this;
                const args = arguments;
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => func.apply(context, args), delay);
            };
        }

        const debouncedUpdateButtonStates = debounce(updateButtonStates, 250);

        boldBtn.addEventListener('click', function () { applyStyle.call(this, 'bold'); });
        italicBtn.addEventListener('click', function () { applyStyle.call(this, 'italic'); });
        underlineBtn.addEventListener('click', function () { applyStyle.call(this, 'underline'); });

        undoBtn.addEventListener('click', function () {
            if (undoStack.length > 1) {
                redoStack.push(undoStack.pop());
                contentArea.value = undoStack[undoStack.length - 1];
            }
        });

        redoBtn.addEventListener('click', function () {
            if (redoStack.length > 0) {
                undoStack.push(redoStack.pop());
                contentArea.value = undoStack[undoStack.length - 1];
            }
        });

        contentArea.addEventListener('input', saveState);
        contentArea.addEventListener('mouseup', debouncedUpdateButtonStates);
        contentArea.addEventListener('keyup', debouncedUpdateButtonStates);
    });
</script>
