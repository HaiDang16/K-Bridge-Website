@{
    ViewData["Title"] = "Bài viết";
    <link href="/css/Newest.css" rel="stylesheet" />
    bool isCmtAvaiable = true;
    bool isVoteAvaiable = ViewBag.IsVote;
    var voteDetail = ViewBag.Vote;
    string CloseAfter = "day";
    bool showResults = false;
    var voteOptionsList = ViewBag.VoteOptionsList;
    var userVotes = ViewBag.UserVotes as List<UserVote>;
}
@using K_Bridge.Models.ViewModels
@model Post

<div class="row mb-5">
    <div class="d-flex justify-content-start fs-4">
        @ViewBag.Post.Title
    </div>
    <div class="d-flex justify-content-between align-items-center" style="border-bottom: 1px solid #493422">
        <div class="m-0 p-0 d-flex justify-content-between">
            <div class="py-2 me-2">@(ViewBag.Post.Replies?.Count ?? 0) Câu trả lời</div>
            <div class="py-2 ms-2">@ViewBag.Post.ViewCount Lượt xem</div>
        </div>
        <div class="newest-card-tag px-5 mx-3"
             style="background: @GetForumColorHelper.GetForumBackgroundColor(ViewBag.Post.Topic.Forum.ID);
                                        color:@GetForumColorHelper.GetForumColor(ViewBag.Post.Topic.Forum.ID)">
            @ViewBag.Post.Topic.Forum.TagName
        </div>
    </div>
    <div class="row m-0 p-0 mt-3 ">
        <div class="col-lg-1 flex-column">
            <partial name="_LikeDislikePartial" model="new Post_Like { PostID = ViewBag.Post.ID, Post = ViewBag.Post }" />
        </div>


        <div class="col-lg-11">
            @if (isVoteAvaiable)
            {
                <div class="my-3">
                    <div class="d-flex justify-content-between my-2">
                        <div class="d-flex justify-content-between">
                            <div class="mx-2 align-content-center">
                                <img src="~/img/chart.png" width="20" height="20" alt="Chart Icon" />
                            </div>
                            <h4 class="text-color-header">@voteDetail.Question</h4>
                        </div>



                    </div>
                    <form id="voteForm" method="post" asp-action="SubmitVote">
                        <input type="hidden" name="postId" value="@ViewBag.Post.ID" />
                        <input type="hidden" id="selectedOptions" name="selectedOptions" />

                        <div id="pollForm">
                            @for (int i = 1; i <= voteOptionsList.Count; i++)
                            {
                                var option = voteOptionsList[i - 1];
                                bool isChecked = userVotes != null && userVotes.Any(uv => uv.VoteOptionID == option.ID);

                                @if (voteDetail.IsUnlimited == false)
                                {
                                    <div class="custom-radio-group d-flex flex-column mb-2">
                                        <label class="custom-radio rounded-3">
                                            <input type="radio" name="voteOption" value="@option.ID" @(isChecked ? "checked" : "")>
                                            <span class="radio-text">@option.Title</span>
                                        </label>
                                    </div>
                                }
                                else
                                {
                                    <div class="custom-radio-group d-flex flex-column mb-2">
                                        <label class="custom-radio rounded-3">
                                            <input type="checkbox" name="voteOptions" value="@option.ID" @(isChecked ? "checked" : "")>
                                            <span class="radio-text">@option.Title</span>
                                        </label>
                                    </div>
                                }
                            }
                        </div>

                        <div id="pollResults" style="display: none;">
                            @{
                                var voteArr = ViewBag.VoteCountArr as IEnumerable<int>;
                                int maxVotes = 0;
                                int totalVotes = 0;

                                if (voteArr != null && voteArr.Any())
                                {
                                    maxVotes = voteArr.Max();
                                    totalVotes = voteArr.Sum();
                                }
                            }
                            @for (int i = 0; i < voteOptionsList.Count; i++)
                            {
                                int votes = voteArr != null && i < voteArr.Count() ? voteArr.ElementAt(i) : 0;
                                int percentageOfTotal = totalVotes > 0 ? (votes * 100) / totalVotes : 0;
                                int percentageOfMax = maxVotes > 0 ? (votes * 100) / maxVotes : 0;
                                int displayWidth = Math.Max(30, percentageOfMax);
                                <div class="poll-result">
                                    <div class="poll-bar" data-width="@displayWidth">
                                        <span class="poll-option">Lựa chọn @(i + 1)</span>
                                        <span class="poll-percentage">@(percentageOfTotal)% (@votes votes)</span>
                                    </div>
                                </div>
                            }
                        </div>

                        @{
                            string closeAfterText = "Bình chọn sẽ đóng sau: ";
                            switch (voteDetail.CloseAfter)
                            {
                                case "day":
                                    closeAfterText += "<small class=\"fw-bold text-color-logo\">1 ngày</small>";
                                    break;
                                case "hour":
                                    closeAfterText += "<small class=\"fw-bold text-color-logo\">1 giờ</small>";
                                    break;
                                case "week":
                                    closeAfterText += "<small class=\"fw-bold text-color-logo\">1 tuần</small>";
                                    break;
                                case "month":
                                    closeAfterText += "<small class=\"fw-bold text-color-logo\">1 tháng</small>";
                                    break;
                                default:
                                    closeAfterText = "";
                                    break;
                            }
                        }
                        @if (!string.IsNullOrEmpty(closeAfterText))
                        {
                            <div class="mt-2">
                                <small class="fs-12 text-color-header">@Html.Raw(closeAfterText)</small>
                            </div>
                        }
                        @*  @if (CloseAfter == "day")
                    {
                    <div class="mt-2">
                    <small class="fs-12 text-color-header">Bình chọn sẽ đóng sau: <small class="fw-bold text-color-logo"> 1 ngày</small> </small>
                    </div>
                    } *@
                        <div class="d-flex justify-content-end align-items-center">
                            <button type="submit" id="voteButton"
                                    class="px-3 py-1 border-main-color-layout btn-account-log rounded-3 mx-2 align-items-center d-flex text-color-header">
                                <img class="align-content-center me-2" src="~/img/vote.png" width="18" height="18" alt="Vote Image" />
                                Bình chọn
                            </button>
                            <button id="toggleButtonVoting" type="button" class="px-3 py-1 btn-account-edit fw-bold rounded-3 mx-2" onclick="toggleResults()">Xem kết quả</button>
                        </div>
                    </form>

                </div>
            }
            <div class="reply-content">
                @Html.Raw(ViewBag.Post.Content)
            </div>
            <img src="~/img/wallpaper.png" alt="Alternate Text" />
        </div>
        <div class="d-flex flex-column">
            <div class="p-3 justify-content-center align-content-center d-flex">
                <p class="text-color-header">Bạn biết ai đó có thể trả lời câu hỏi này? Hãy chia sẻ đường dẫn câu hỏi đến họ qua:</p>
            </div>
            <div class="justify-content-center align-content-center d-flex px-3 gap-4">
                <img class="h-50" src="~/img/Facebook.png" alt="Facebook" />
                <img class="h-50" src="~/img/Pinterest.png" alt="Pinterest" />
                <img class="h-50" src="~/img/Reddit.png" alt="Reddit" />
                <img class="h-50" src="~/img/Telegram.png" alt="Telegram" />
                <img class="h-50" src="~/img/Github.png" alt="Github" />
            </div>
            <div class="d-flex justify-content-end mt-2">
                <img src="~/img/avatar_default.png" class="rounded-circle" alt="Avatar" width="30" height="30">
                <div class="newest-card-username mx-2">@ViewBag.Post.User.Username hỏi @GetTimeAgoHelper.GetTimeAgo(@ViewBag.Post.CreatedAt)</div>
                @if (ViewBag.CurrentUser != null && ViewBag.Post != null && ViewBag.CurrentUser.ID != null && ViewBag.Post.UserID == ViewBag.CurrentUser.ID)
                {
                    <button class="align-content-center" onclick="window.location.href='/Post/Edit?id=@ViewBag.Post.ID'">
                        <img src="~/img/icon_edit_50.png" width="20" height="20" alt="EditPost" />
                    </button>
                }

            </div>
            @if (isCmtAvaiable)
            {
                <div class="mt-5 mb-4 d-flex justify-content-between">
                    <div class="fw-bold fs-4 d-flex text-color-logo">
                        @ViewBag.Post.Replies.Count Câu trả lời
                    </div>
                    <div class="d-flex text-color-header  w-50">
                        <div class="form-group d-flex w-100 align-items-center justify-content-between">
                            <label class="w-100" for="sortSelect">Sắp xếp theo:</label>
                            <select class="form-control " id="sortSelect">
                                <option value="newest" selected="@(ViewBag.Sort == "newest" ? "selected" : "")">Mới nhất</option>
                                <option value="oldest" selected="@(ViewBag.Sort == "oldest" ? "selected" : "")">Cũ nhất</option>
                                <option value="helpful" selected="@(ViewBag.Sort == "helpful" ? "selected" : "")">Hữu ích nhất</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div id="repliesContainer">
                    @await Html.PartialAsync("_RepliesPartial", (ReplyPaginationViewModel)ViewBag.ReplyViewModel)
                </div>
            }
            @if (ViewBag.CurrentUser != null && ViewBag.Post != null && ViewBag.CurrentUser.ID != null)
            {
                <div>
                    <p class="fs-5 text-color-logo">
                        Câu trả lời của bạn:
                    </p>
                </div>
                <form method="post" asp-action="SubmitReply">
                    <input type="hidden" name="postId" value="@ViewBag.Post.ID" />

                    <div class="border-2 rounded-3 border-main-color-header p-2 text-color-logo">
                        <div class="d-flex col-lg-3 justify-content-evenly fs-5">
                            <button type="button" id="bold-btn" class="btn btn-outline-secondary m-2 px-2 py-1 rounded-3 hover-bold" style="min-width: 32px;">
                                <span>B</span>
                            </button>
                            <button type="button" id="italic-btn" class="btn btn-outline-secondary m-2 px-2 py-1 rounded-3 hover-italic" style="min-width: 32px;">
                                <span>I</span>
                            </button>
                            <button type="button" id="underline-btn" class="btn btn-outline-secondary m-2 px-2 py-1 rounded-3 hover-underline" style="min-width: 32px;">
                                <span>U</span>
                            </button>
                            <button type="button" id="ordered-list-btn" class="btn btn-outline-secondary m-2 px-2 py-1 rounded-3" style="min-width: 32px;">
                                <span>1.</span>
                            </button>
                            <button type="button" id="unordered-list-btn" class="btn btn-outline-secondary m-2 px-2 py-1 rounded-3" style="min-width: 32px;">
                                <span>•</span>
                            </button>
                            <button type="button" id="undo-btn" class="btn btn-outline-secondary m-2 px-2 py-1 rounded-3" style="min-width: 32px;">
                                <span>↶</span>
                            </button>
                            <button type="button" id="redo-btn" class="btn btn-outline-secondary m-2 px-2 py-1 rounded-3" style="min-width: 32px;">
                                <span>↷</span>
                            </button>
                        </div>
                        <div class="border-top">
                            @* <textarea id="content-area" class="focus form-control m-2 p-2" style="min-height: 100px; width: calc(100% - 1rem); resize: vertical;"
                        name="answerContent" placeholder="Viết câu trả lời tại đây..."></textarea> *@
                            <div id="editor" class="focus form-control m-2 p-2" style="min-height: 100px; width: calc(100% - 1rem); resize: vertical;"
                                 contenteditable="true"></div>
                            <input type="hidden" id="content-area" name="answerContent">

                        </div>
                    </div>

                    <div class="d-flex justify-content-end mt-2">
                        <button type="submit" class="m-2 px-3 py-2 bg-main-color-layout text-color-logo rounded-3">Đăng câu trả lời của bạn</button>
                    </div>

                </form>
            }
            <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
                <div id="liveToastDetail" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-body text-color-background fw-bold text-center rounded-bottom rounded-3" style="background-color: #493422; border: 2px solid #FFF0E6;">
                        <div id="detailSummary"></div>
                    </div>
                </div>
            </div>

        </div>
    </div>

</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const editor = document.getElementById('editor');
        const boldBtn = document.getElementById('bold-btn');
        const italicBtn = document.getElementById('italic-btn');
        const underlineBtn = document.getElementById('underline-btn');
        const undoBtn = document.getElementById('undo-btn');
        const redoBtn = document.getElementById('redo-btn');
        const orderedListBtn = document.getElementById('ordered-list-btn');
        const unorderedListBtn = document.getElementById('unordered-list-btn');
        const hiddenInput = document.getElementById('content-area');

        function execCommand(command) {
            document.execCommand(command, false, null);
            editor.focus();
        }

        boldBtn.addEventListener('click', () => execCommand('bold'));
        italicBtn.addEventListener('click', () => execCommand('italic'));
        underlineBtn.addEventListener('click', () => execCommand('underline'));
        undoBtn.addEventListener('click', () => execCommand('undo'));
        redoBtn.addEventListener('click', () => execCommand('redo'));

        orderedListBtn.addEventListener('click', function () {
            createList('ol');
        });

        unorderedListBtn.addEventListener('click', function () {
            createList('ul');
        });

        function createList(type) {
            const selection = window.getSelection();
            const range = selection.getRangeAt(0);
            const listElement = document.createElement(type);
            const listItem = document.createElement('li');

            if (range.commonAncestorContainer.nodeName === 'DIV' && range.commonAncestorContainer.id === 'editor') {
                // Nếu không có nội dung được chọn, tạo một mục danh sách trống
                listItem.appendChild(document.createElement('br'));
                listElement.appendChild(listItem);
                range.insertNode(listElement);
            } else {
                // Nếu có nội dung được chọn, bọc nó trong một mục danh sách
                listItem.appendChild(range.extractContents());
                listElement.appendChild(listItem);
                range.insertNode(listElement);
            }

            // Di chuyển con trỏ vào cuối mục danh sách vừa tạo
            const newRange = document.createRange();
            newRange.selectNodeContents(listItem);
            newRange.collapse(false);
            selection.removeAllRanges();
            selection.addRange(newRange);

            editor.focus();
        }

        editor.addEventListener('input', function () {
            hiddenInput.value = editor.innerHTML;
        });

        // Xử lý form submit
        document.querySelector('form').addEventListener('submit', function (e) {
            hiddenInput.value = editor.innerHTML;
        });
    });


</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var sortSelect = document.getElementById('sortSelect');
        sortSelect.addEventListener('change', function () {
            var selectedSort = sortSelect.value;
            var postId = '@ViewBag.Post.ID';

            fetch(`/Post/GetReplies?postId=${postId}&sort=${selectedSort}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('repliesContainer').innerHTML = html;
                });
            loadReplies(postId, selectedSort, 1);
        });
    });
</script>

<script>
    function toggleResults() {
        var pollForm = document.getElementById('pollForm');
        var pollResults = document.getElementById('pollResults');
        var toggleButton = document.getElementById('toggleButtonVoting');
        var voteButton = document.getElementById('voteButton');

        if (pollForm.style.display !== 'none') {
            // Hiện thị bảng kết quả, ẩn bảng bình chọn
            pollForm.style.display = 'none';
            pollResults.style.display = 'block';

            // Thay đổi chữ của nút
            toggleButton.innerText = 'Quay về bình chọn';

            // Ẩn nút bình chọn
            voteButton.classList.remove('d-flex');
            voteButton.classList.add('d-none');


            // Use requestAnimationFrame to ensure DOM is updated
            requestAnimationFrame(function () {
                requestAnimationFrame(function () {
                    var pollBars = document.querySelectorAll('.poll-bar');
                    pollBars.forEach(function (bar) {
                        var targetWidth = bar.getAttribute('data-width') + '%';
                        bar.style.width = targetWidth;
                    });
                });
            });
        } else {
            // Hiện thị bảng bình chọn, ẩn bảng kết quả
            pollForm.style.display = 'block';
            pollResults.style.display = 'none';

            // Thay đổi chữ của nút
            toggleButton.textContent = 'Xem kết quả';

            // Hiển thị lại nút bình chọn
            //voteButton.style.display = 'block';

            // Reset widths to 30% when hiding results
            var pollBars = document.querySelectorAll('.poll-bar');
            pollBars.forEach(function (bar) {
                bar.style.width = '30%';
            });
        }
    }
</script>

@*Script để cập nhật vote*@
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const voteForm = document.getElementById('voteForm');
        const selectedOptionsInput = document.getElementById('selectedOptions');

        voteForm.addEventListener('submit', function (e) {
            e.preventDefault();
            var responseSummary = document.getElementById('detailSummary');
            responseSummary.innerHTML = ''; // Xóa nội dung cũ


            let selectedOptions = [];

            // Get selected options
            const selectedRadio = document.querySelector('input[name="voteOption"]:checked');
            if (selectedRadio) {
                selectedOptions.push(selectedRadio.value);
            }

            const selectedCheckboxes = document.querySelectorAll('input[name="voteOptions"]:checked');
            selectedCheckboxes.forEach(checkbox => {
                selectedOptions.push(checkbox.value);
            });

            // Set selected options to hidden input
            selectedOptionsInput.value = selectedOptions.join(',');

            // Submit the form via AJAX
            fetch('/Post/SubmitVote', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams(new FormData(voteForm)).toString(),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        responseSummary.innerHTML = '<div>Bình chọn thành công.</div>';
                        responseSummary.style.display = 'block';
                        showToast('liveToastDetail');

                        // Lưu trạng thái để xác định việc gọi toggleResults
                        localStorage.setItem('showResults', 'true');

                        // Tải lại trang
                        window.location.reload();
                    } else {
                        if (data.messages != null) {
                            console.log(data.messages)
                            responseSummary.innerHTML = `<div>${data.messages}</div>`;
                            responseSummary.style.display = 'block';
                            showToast('liveToastDetail');
                        } else {
                            responseSummary.innerHTML = '<div>Có lỗi xảy ra trong quá trình xử lý.</div>';
                            responseSummary.style.display = 'block';
                            showToast('liveToastDetail');
                        }
                    }
                })
                .catch(error => console.error('Error:', error));
        });
    });

    window.addEventListener('load', function () {
        if (localStorage.getItem('showResults') === 'true') {
            toggleResults();
            localStorage.removeItem('showResults'); // Xóa trạng thái sau khi đã xử lý
        }
    });  
</script>

<script>
    // function loadReplies(postId, sort, page) {
    //     $.ajax({
    //         url: `/Post/GetReplies?postId=${postId}&sort=${sort}&page=${page}`,
    //         type: 'GET',
    //         success: function (result) {
    //             $('#repliesContainer').html(result);
    //         }
    //     });
    // }

    function loadReplies(postId, sort, page) {
        $.ajax({
            url: '/Post/GetReplies',
            data: { postId: postId, sort: sort, page: page },
            type: 'GET',
            success: function (result) {
                $('#repliesContainer').html(result);
            }
        });
    }

    $(document).ready(function () {
        var postId = '@ViewBag.Post.ID'; // Lấy postId từ ViewBag
        var initialSort = '@ViewBag.Sort'; // Lấy sort ban đầu từ ViewBag
        loadReplies(postId, initialSort, 1); // Load trang đầu tiên
    });
</script>
