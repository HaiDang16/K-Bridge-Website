@model UpdateUserProfileViewModel
@{
    ViewData["Title"] = "Chỉnh sửa hồ sơ";
    var currentUser = ViewBag.CurrentUser;
}
<div>
    <p class="text-color-logo fw-bold fs-4">Hồ sơ của @currentUser.Username</p>
    <p class="text-color-header fs-12" style="line-height: 2.0;">
        Tại đây, bạn có thể dễ dàng thay đổi ảnh đại diện, ảnh bìa hoặc tên hiển thị của mình, giúp hồ sơ của bạn trở nên cá nhân hơn và phản ánh đúng về chính bạn.<br /> Hãy tùy chỉnh giao diện của trang cá nhân ngay bây giờ để thể hiện phong cách và sở thích của mình!
    </p>
</div>
<form id="profile-form" enctype="multipart/form-data">
    <div class="d-flex">
        <div class="col-6">
            <div style="width: 90%;">
                <div class="mt-2 text-color-header fw-bold text-uppercase fs-12">ảnh đại điện</div>
                <label for="avatar-upload" style="width:90%; cursor:pointer;" class=" my-2  btn-account-log px-3 py-1 rounded-3">
                    <i class="bi bi-upload mx-3"></i> Chọn ảnh mới
                </label>
                <input type="file" id="avatar-upload" asp-for="AvatarFile" class="d-none" accept="image/*">

                <div for="exampleColorInput" class="mt-2 text-color-header fw-bold text-uppercase fs-12">ảnh bìa</div>

                <input type="color" class="my-2 form-control form-control-color border-0 p-0 focus" style="min-width: 90%;" asp-for="ProfileColor"
                       id="exampleColorInput" value="#8E6745" title="Lựa chọn màu ảnh bìa">

            </div>
        </div>
        <div class="col-6">
            <div class="text-color-header fw-bold text-uppercase fs-12">Giới thiệu về tôi</div>
            <textarea style="min-height:100%; min-width:98%;" name="NewBiography"
                      class="my-2 m-2 p-3 fs-6 text-color-logo rounded-8 focus border-main-color-background" id="content-textarea"
                      placeholder="Viết nội dung của bài viết tại đây...">@currentUser.Biography</textarea>

            <input asp-for="Biography" style="display:none" />
        </div>
    </div>
    <div>
        <div class="mt-4 text-color-header fw-bold text-uppercase fs-12">xem trước</div>
        <div class="my-2">
            <div class="bg-main-color-layout rounded-8" style="min-height: 280px;">
                @if (currentUser.ProfileColor != null)
                {
                    <div id="target-div" style="height: 100px; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem; background-color: @currentUser.ProfileColor;"></div>
                }
                else
                {
                    <div id="target-div" style="height: 100px; border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem; background-color: #8E6745;"></div>
                }
                <div class="d-flex position-relative flex-column">
                    <div>
                        <div class="col-2 my-4">
                            @if (currentUser.Avatar == null)
                            {
                                <div class="bg-main-color-layout p-2 position-absolute rounded-3" style="top:-40px; left:45px;">
                                    <img width="100" height="100"
                                         src="~/img/avatar_default.png" id="avatar-preview" class="img-fluid rounded-3 "
                                         style=" object-fit: cover;"
                                         alt="Avatar">
                                </div>
                                
                            }
                            else
                            {
                                <div class="bg-main-color-layout p-2 position-absolute rounded-3" style="top:-40px; left:45px;">
                                    <img width="100" height="100"
                                         src="~/avatars/@currentUser.Avatar" id="avatar-preview" class="img-fluid rounded-3 "
                                         style=" object-fit: cover;"
                                         alt="Avatar">
                                </div>
                            }
                        </div>
                        <div class="mt-3 col-2">
                            <p class="fs-5 position-absolute" style="left:165px;">@currentUser.Username</p>
                        </div>

                    </div>
                    
                    <div class="px-4 py-2 position-absolute" style="top: 76px">
                        <p class="text-color-header" id="content-display"></p>
                    </div>
                </div>
                
            </div>
        </div>
        <div class="d-flex">
            <button id="save-btn" type="submit" class="mt-3 btn btn-edit-profile d-none">Lưu thay đổi</button>
            <button id="reset-btn" type="reset" class="mt-3 btn d-none">Đặt lại</button>
        </div>

    </div>
</form>

<div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
    <div id="liveToastUserProfile" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body text-color-background fw-bold text-center rounded-bottom rounded-3"
             style="background-color: #493422; border: 2px solid #FFF0E6;">
            <div id="userProfileSummary"></div>
        </div>
    </div>
</div>

<script>
    document.getElementById('avatar-upload').addEventListener('change', function (e) {
        var file = e.target.files[0];
        if (file) {
            var reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById('avatar-preview').src = e.target.result;
            }
            reader.readAsDataURL(file);
        }
    });
</script>
<script>
    const colorInput = document.getElementById('exampleColorInput');
const avatarUpload = document.getElementById('avatar-upload');
const saveBtn = document.getElementById('save-btn');
const resetBtn = document.getElementById('reset-btn');
const targetDiv = document.getElementById('target-div');
const contentTextarea = document.getElementById('content-textarea');
const contentDisplay = document.getElementById('content-display');
const avatarPreview = document.getElementById('avatar-preview');

let originalColor = colorInput.value;
let originalAvatar = avatarPreview.src;
let originalContent = contentTextarea.value;

function checkForChanges() {
    if (colorInput.value !== originalColor ||
        avatarUpload.files.length > 0 ||
        contentTextarea.value !== originalContent) {
        saveBtn.classList.remove('d-none');
        resetBtn.classList.remove('d-none');
    } else {
        saveBtn.classList.add('d-none');
        resetBtn.classList.add('d-none');
    }
}

function updateContentDisplay() {
    contentDisplay.textContent = contentTextarea.value.trim() === '' ? 'Đây là giới thiệu của bạn!' : contentTextarea.value;
}

colorInput.addEventListener('input', () => {
    targetDiv.style.backgroundColor = colorInput.value;
    checkForChanges();
});

avatarUpload.addEventListener('change', (e) => {
    if (e.target.files[0]) {
        const reader = new FileReader();
        reader.onload = (e) => {
            avatarPreview.src = e.target.result;
        };
        reader.readAsDataURL(e.target.files[0]);
    }
    checkForChanges();
});

contentTextarea.addEventListener('input', () => {
    updateContentDisplay();
    checkForChanges();
});

saveBtn.addEventListener('click', () => {
    originalColor = colorInput.value;
    originalAvatar = avatarPreview.src;
    originalContent = contentTextarea.value;
    saveBtn.classList.add('d-none');
    resetBtn.classList.add('d-none');
});

resetBtn.addEventListener('click', () => {
    colorInput.value = originalColor;
    targetDiv.style.backgroundColor = originalColor;
    avatarPreview.src = originalAvatar;
    avatarUpload.value = ''; // Đặt lại input file
    contentTextarea.value = originalContent;
    updateContentDisplay();
    checkForChanges();
});

// Khởi tạo ban đầu
updateContentDisplay();
</script>
@* <script>
    // Lấy giá trị từ color picker và gán nền xem trước
    const colorInput = document.getElementById('exampleColorInput');
    const avatarUpload = document.getElementById('avatar-upload');
    const saveBtn = document.getElementById('save-btn');
    const resetBtn = document.getElementById('reset-btn');
    const targetDiv = document.getElementById('target-div');
    // Lấy giá trị từ thẻ textarea và gán vào thẻ p
    const contentTextarea = document.getElementById('content-textarea');
    const contentDisplay = document.getElementById('content-display');

    let originalColor = colorInput.value;
    let originalAvatar = null;
    let originalContent = contentTextarea.value;

    colorInput.addEventListener('input', () => {
        targetDiv.style.backgroundColor = colorInput.value;
    });
    
    
    function checkForChanges() {
        if (colorInput.value !== originalColor ||
            avatarUpload.files.length > 0 ||
            contentTextarea.value !== originalContent) {
            saveBtn.classList.remove('d-none');
            resetBtn.classList.remove('d-none');
        } else {
            saveBtn.classList.add('d-none');
            resetBtn.classList.add('d-none');
        }
    }
    colorInput.addEventListener('input', checkForChanges);

    avatarUpload.addEventListener('change', checkForChanges);

    contentTextarea.addEventListener('input', checkForChanges);
    contentTextarea.addEventListener('input', updateContentDisplay);

    // Hàm cập nhật nội dung của thẻ <p>
    function updateContentDisplay() {
        if (contentTextarea.value.trim() === '') {
            contentDisplay.textContent = 'Đây là giới thiệu của bạn!';
        } else {
            contentDisplay.textContent = contentTextarea.value;
        }
    }

    // Hàm cập nhật nội dung của thẻ ảnh bìa
    function updateContentDisplay() {
        if (contentTextarea.value.trim() === '') {
            contentDisplay.textContent = 'Đây là giới thiệu của bạn!';
        } else {
            contentDisplay.textContent = contentTextarea.value;
        }
    }

    // Thêm event listener để lắng nghe sự kiện thay đổi nội dung của <textarea>
    contentTextarea.addEventListener('input', updateContentDisplay);

    // Cập nhật nội dung của thẻ <p> lần đầu
    updateContentDisplay();

    contentTextarea.addEventListener('input', () => {
        if (contentTextarea.value !== originalContent) {
            saveBtn.classList.remove('d-none');
            resetBtn.classList.remove('d-none');
        } else {
            saveBtn.classList.add('d-none');
            resetBtn.classList.add('d-none');
        }
    });

    saveBtn.addEventListener('click', () => {
        originalColor = colorInput.value;
        originalAvatar = avatarUpload.files[0];
        originalContent = contentTextarea.value;
        saveBtn.classList.add('d-none');
        resetBtn.classList.add('d-none');
    });

    resetBtn.addEventListener('click', () => {
        colorInput.value = originalColor;
        avatarUpload.value = ''; // Đặt lại input file
        contentTextarea.value = originalContent;
        contentDisplay.textContent = 'Đây là giới thiệu của bạn!';
        resetBtn.classList.add('d-none');
        checkForChanges();
    });
</script>
 *@
<!--Script change scale Avatar-->
<script>
    document.getElementById('avatar-upload').addEventListener('change', function (e) {
        var file = e.target.files[0];
        if (file) {
            var reader = new FileReader();
            reader.onload = function (e) {
                var img = new Image();
                img.onload = function () {
                    var canvas = document.createElement('canvas');
                    var ctx = canvas.getContext('2d');

                    // Đặt kích thước canvas
                    canvas.width = 100;
                    canvas.height = 100;

                    // Tính toán kích thước và vị trí cắt
                    var size = Math.min(img.width, img.height);
                    var x = (img.width - size) / 2;
                    var y = (img.height - size) / 2;

                    // Tính toán tỷ lệ để vẽ ảnh vào canvas
                    var scale = Math.max(canvas.width / size, canvas.height / size);
                    var newWidth = size * scale;
                    var newHeight = size * scale;
                    var dx = (canvas.width - newWidth) / 2;
                    var dy = (canvas.height - newHeight) / 2;

                    // Vẽ nền trắng
                    ctx.fillStyle = '#FFFFFF';
                    ctx.fillRect(0, 0, canvas.width, canvas.height);

                    // Vẽ phần được cắt của ảnh lên canvas
                    ctx.drawImage(img, x, y, size, size, dx, dy, newWidth, newHeight);

                    // Chuyển đổi canvas thành URL dữ liệu
                    var dataUrl = canvas.toDataURL('image/jpeg');

                    // Hiển thị ảnh đã cắt
                    document.getElementById('avatar-preview').src = dataUrl;
                }
                img.src = e.target.result;
            }
            reader.readAsDataURL(file);
        }
    });
</script>

<!--Script submit update-->
<script>
    document.getElementById('profile-form').addEventListener('submit', function (e) {
        e.preventDefault();
        var formData = new FormData(this);

        var responseSummary = document.getElementById('userProfileSummary');
        responseSummary.innerHTML = ''; // Xóa nội dung cũ

        fetch('/UserProfile/EditProfile', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    responseSummary.innerHTML = '<div>Cập nhật thành công</div>';
                    responseSummary.style.display = 'block';
                    showToast('liveToastUserProfile');
                    setTimeout(() => {
                        window.location.href = '/UserProfile?id=' + data.userId;
                    }, 2000);
                } else {
                    if (data.messages != null) {
                        responseSummary.innerHTML = `<div>${data.messages}</div>`;
                        responseSummary.style.display = 'block';
                        showToast('liveToastDeliveToastUserProfiletail');
                    } else {
                        responseSummary.innerHTML = '<div>Có lỗi xảy ra trong quá trình xử lý</div>';
                        responseSummary.style.display = 'block';
                        showToast('liveToastUserProfile');
                    }
                }
            })
            .catch(error => console.error('Lỗi:', error));
    });
</script>